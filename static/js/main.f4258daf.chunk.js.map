{"version":3,"sources":["Hooks/Users.jsx","App.js","reportWebVitals.js","index.js"],"names":["Users","props","useState","users","setUsers","a","axios","useEffect","result","data","getUsers","getState","getCity","map","user","name","id","state","city","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAmDeA,MAhDf,SAAeC,GACZ,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KADmB,4CAkBlB,sBAAAC,EAAA,sEAC4BC,IAAM,6DADlC,0DAlBkB,sBAuBlB,OApBAC,qBAAU,WAAI,4CAEb,4BAAAF,EAAA,sEACqBC,IAAM,0DAD3B,OACQE,EADR,OAECJ,EAASI,EAAOC,MAFjB,4CAFa,kEASd,sBAAAJ,EAAA,sEAC4BC,IAAM,6DADlC,0DATc,uBAAC,WAAD,wBAMVI,GANU,mCAYdC,MAfkB,mCAqBlBC,GAGI,gCACI,kDACA,6BACKT,EAAMU,KAAI,SAAAC,GAAI,OACX,+BAAoBA,EAAKC,KAAzB,MAASD,EAAKE,SAGtB,uDACA,6BACKb,EAAMU,KAAI,SAAAC,GAAI,OACX,+BAAoBA,EAAKG,MAAzB,MAASH,EAAKE,SAGtB,oDACA,6BACKb,EAAMU,KAAI,SAAAC,GAAI,OACX,+BAAoBA,EAAKI,KAAzB,MAASJ,EAAKE,aCjCnBG,MANf,SAAalB,GACX,OACA,cAAC,EAAD,KCMamB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f4258daf.chunk.js","sourcesContent":["import React, { useState ,useEffect} from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Users(props) {\r\n   const [users,setUsers]= useState([]);\r\n\r\n    useEffect(()=>{\r\n    \r\n     async function getUsers() {\r\n       const result=await axios(\"https://api.openbrewerydb.org/breweries?by_name=cooper\");\r\n      setUsers(result.data);\r\n        }\r\n        getUsers();\r\n\r\n\r\n    async function getState(){\r\n        const stateResult=await axios(\"https://api.openbrewerydb.org/breweries?by_state=new_york\");\r\n    }\r\n    getState();\r\n    })\r\n    \r\n    async function getCity(){\r\n        const cityResults=await axios(\"https://api.openbrewerydb.org/breweries?by_city=san_diego\");\r\n    }\r\n    getCity();\r\n    \r\n    return (\r\n        <div>\r\n            <h3>All users data  </h3>\r\n            <ul >\r\n                {users.map(user=>\r\n                    <li key={user.id} >{user.name})</li>\r\n                )}\r\n            </ul>\r\n            <h3>All data with state  </h3>\r\n            <ul>\r\n                {users.map(user=>\r\n                    <li key={user.id} >{user.state})</li>\r\n                )}\r\n            </ul>\r\n            <h3>All data with city</h3>\r\n            <ol>\r\n                {users.map(user=>\r\n                    <li key={user.id} >{user.city})</li>\r\n                )}\r\n            </ol>\r\n            \r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Users;","import './App.css';\nimport React from 'react';\nimport Users from './Hooks/Users';\n\nfunction App(props) {\n  return (\n  <Users />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}